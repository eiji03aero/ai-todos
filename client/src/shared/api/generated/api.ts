/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * API
 * APIs for AI todos application
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApiAuthAppState200,
  GetApiAuthCheckEmail200,
  GetApiAuthCheckEmailParams,
  PostApiAuthLogin200,
  PostApiAuthLoginBody,
  PostApiAuthSignup201,
  PostApiAuthSignupBody,
  PostApiAuthValidateSession200
} from './api.schemas';

import { mutator } from '../mutator';




/**
 * @summary Check email uniqueness
 */
export const getApiAuthCheckEmail = (
    params: GetApiAuthCheckEmailParams,
 signal?: AbortSignal
) => {
      
      
      return mutator<GetApiAuthCheckEmail200>(
      {url: `/api/auth/check-email`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiAuthCheckEmailQueryKey = (params: GetApiAuthCheckEmailParams,) => {
    return [`/api/auth/check-email`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiAuthCheckEmailQueryOptions = <TData = Awaited<ReturnType<typeof getApiAuthCheckEmail>>, TError = unknown>(params: GetApiAuthCheckEmailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthCheckEmail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAuthCheckEmailQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAuthCheckEmail>>> = ({ signal }) => getApiAuthCheckEmail(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAuthCheckEmail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiAuthCheckEmailQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAuthCheckEmail>>>
export type GetApiAuthCheckEmailQueryError = unknown


export function useGetApiAuthCheckEmail<TData = Awaited<ReturnType<typeof getApiAuthCheckEmail>>, TError = unknown>(
 params: GetApiAuthCheckEmailParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthCheckEmail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthCheckEmail>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthCheckEmail>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthCheckEmail<TData = Awaited<ReturnType<typeof getApiAuthCheckEmail>>, TError = unknown>(
 params: GetApiAuthCheckEmailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthCheckEmail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthCheckEmail>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthCheckEmail>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthCheckEmail<TData = Awaited<ReturnType<typeof getApiAuthCheckEmail>>, TError = unknown>(
 params: GetApiAuthCheckEmailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthCheckEmail>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Check email uniqueness
 */

export function useGetApiAuthCheckEmail<TData = Awaited<ReturnType<typeof getApiAuthCheckEmail>>, TError = unknown>(
 params: GetApiAuthCheckEmailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthCheckEmail>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiAuthCheckEmailQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Create a new user account with email and password
 * @summary User signup
 */
export const postApiAuthSignup = (
    postApiAuthSignupBody: PostApiAuthSignupBody,
 signal?: AbortSignal
) => {
      
      
      return mutator<PostApiAuthSignup201>(
      {url: `/api/auth/signup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiAuthSignupBody, signal
    },
      );
    }
  


export const getPostApiAuthSignupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthSignup>>, TError,{data: PostApiAuthSignupBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthSignup>>, TError,{data: PostApiAuthSignupBody}, TContext> => {

const mutationKey = ['postApiAuthSignup'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthSignup>>, {data: PostApiAuthSignupBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthSignup(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthSignupMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthSignup>>>
    export type PostApiAuthSignupMutationBody = PostApiAuthSignupBody
    export type PostApiAuthSignupMutationError = unknown

    /**
 * @summary User signup
 */
export const usePostApiAuthSignup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthSignup>>, TError,{data: PostApiAuthSignupBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthSignup>>,
        TError,
        {data: PostApiAuthSignupBody},
        TContext
      > => {

      const mutationOptions = getPostApiAuthSignupMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Validates the current user session and returns whether it is valid or expired.
 * @summary Validate user session
 */
export const postApiAuthValidateSession = (
    
 signal?: AbortSignal
) => {
      
      
      return mutator<PostApiAuthValidateSession200>(
      {url: `/api/auth/validate-session`, method: 'POST', signal
    },
      );
    }
  


export const getPostApiAuthValidateSessionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthValidateSession>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthValidateSession>>, TError,void, TContext> => {

const mutationKey = ['postApiAuthValidateSession'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthValidateSession>>, void> = () => {
          

          return  postApiAuthValidateSession()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthValidateSessionMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthValidateSession>>>
    
    export type PostApiAuthValidateSessionMutationError = unknown

    /**
 * @summary Validate user session
 */
export const usePostApiAuthValidateSession = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthValidateSession>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthValidateSession>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostApiAuthValidateSessionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Authenticate a user and create a session
 * @summary User login
 */
export const postApiAuthLogin = (
    postApiAuthLoginBody: PostApiAuthLoginBody,
 signal?: AbortSignal
) => {
      
      
      return mutator<PostApiAuthLogin200>(
      {url: `/api/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiAuthLoginBody, signal
    },
      );
    }
  


export const getPostApiAuthLoginMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: PostApiAuthLoginBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: PostApiAuthLoginBody}, TContext> => {

const mutationKey = ['postApiAuthLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthLogin>>, {data: PostApiAuthLoginBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthLogin>>>
    export type PostApiAuthLoginMutationBody = PostApiAuthLoginBody
    export type PostApiAuthLoginMutationError = unknown

    /**
 * @summary User login
 */
export const usePostApiAuthLogin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: PostApiAuthLoginBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthLogin>>,
        TError,
        {data: PostApiAuthLoginBody},
        TContext
      > => {

      const mutationOptions = getPostApiAuthLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Get current application state for authenticated user
 */
export const getApiAuthAppState = (
    
 signal?: AbortSignal
) => {
      
      
      return mutator<GetApiAuthAppState200>(
      {url: `/api/auth/app_state`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiAuthAppStateQueryKey = () => {
    return [`/api/auth/app_state`] as const;
    }

    
export const getGetApiAuthAppStateQueryOptions = <TData = Awaited<ReturnType<typeof getApiAuthAppState>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthAppState>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAuthAppStateQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAuthAppState>>> = ({ signal }) => getApiAuthAppState(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAuthAppState>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiAuthAppStateQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAuthAppState>>>
export type GetApiAuthAppStateQueryError = unknown


export function useGetApiAuthAppState<TData = Awaited<ReturnType<typeof getApiAuthAppState>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthAppState>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthAppState>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthAppState>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthAppState<TData = Awaited<ReturnType<typeof getApiAuthAppState>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthAppState>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthAppState>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthAppState>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiAuthAppState<TData = Awaited<ReturnType<typeof getApiAuthAppState>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthAppState>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get current application state for authenticated user
 */

export function useGetApiAuthAppState<TData = Awaited<ReturnType<typeof getApiAuthAppState>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiAuthAppState>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiAuthAppStateQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




